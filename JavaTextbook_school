第三版Java大学实用教程

此处放一些看书学的例子，都很简单。

例1：用户在键盘依次输入若干个数字，每输入一个数字都需要按回车键确认，最后在键盘输入一个非数字字符串结束整个输入操作过程。程序将计算出这些数的和以及平均值。（此处只用到了main函数，没用到类）

public static void main(String[] args) {
		Scanner in = new Scanner(System.in);
		double sum = 0.0;
		int num = 0;
		while( in.hasNextDouble())
		{
			sum += in.nextDouble();
			num ++;
		}
		System.out.printf("%d个数的和是%f%n", num,sum);		/*此处可以用\n或者%n来换行，但是书上说java推荐使用%n，这是为什么，用%n在程序的效率和质量上有什么体现吗？*/
		System.out.printf("%d个数的平均值是%f", num,sum/num);
	}


例2：使用数组。（此处只用到了main函数，没用到类）

public static void main(String[] args) {
		int[] a = {1,2,3};
		int[] b = {10,11};
		char[] c = {'c','a','t'};
		
		System.out.println(c);		//对于char[],println(c)不会输出地址，而是会输出全部元素的值，即作为字符串输出
		System.out.printf("a[0]=%d,a[1]=%d,a[2]=%d\n",a[0],a[1],a[2]);
		System.out.printf("b[0]=%d,b[1]=%d\n",b[0],b[1]);
		System.out.println("数组a的引用是："+a);		//输出的是a的地址
		System.out.println("数组b的引用是："+b);
		
		b = a;
		System.out.println("数组a的引用是："+a);
		System.out.println("数组b的引用是："+b);
	}


例3：用户输入移位运算的两个操作元，程序给出右移和左移后的结果。（此处只用到了main函数，没用到类）

public static void main(String[] args) {
		Scanner in = new Scanner(System.in);
		System.out.println("请输入待移位的int型整数：");
		int x = in.nextInt();
		System.out.println("请输入移位量：");
		int n = in.nextInt();
		System.out.println("左移位的结果是："+(x<<n));	//二进制移位，可参考十进制移位来理解，具体二进制移位规则请见书p24
		System.out.println("右移位的结果是："+(x>>n));
	}


例4：利用“异或”运算的性质，对几个字符进行加密并输出密文，再解密。（此处只用到了main函数，没用到类）

小知识：如果a^b->c,那么c^b->a,即对同一个数（a）进行两次“异或”运算的结果仍是a。

public static void main(String[] args) {
		char[] a = {'金','木','水','火','土'};
		char secret = 'z';
		for( int i=0; i<a.length; i++)		//加密
		{
			a[i] = (char)(a[i]^secret);		//此处必须强制转换成char类型，否则报错，为什么呢？难道他们异或得到的不是一个char类型数据吗？
		}
		System.out.println("密文：");
		for( int i=0; i<a.length; i++)
		{
			System.out.printf("%3c", a[i]);
		}
		
		for( int i=0; i<a.length; i++)		//解密
		{
			a[i] = (char)(a[i]^secret);		
		}
		System.out.printf("\n原文：\n");
		for( int i=0; i<a.length; i++)
		{
			System.out.printf("%3c", a[i]);
		}
	}

例5：使用java.until包中的Date类，用来显示本机的当前时间。

import java.util.Date;

public class Hello {

	public static void main(String[] args) {
		Date date = new Date();
		System.out.println(date);
	}
}

输出形式如下（CST指的是一种时间规定，能够同时给出四个地区的标准时间）
Sat Dec 03 09:54:20 CST 2016


例6：设置矩形和圆形的相关参数，并显示两个形状的相对位置。（共有三个类，Rectangle,Circle,Geometry。具体要求见书p64）

package geometry;

public class Rectangle {
	private double x;
	private double y;
	private double width;
	private double height;
	
	public void setX(double x) {
		this.x = x;
	}
	
	public void setY(double y) {
		this.y = y;
	}
	
	public void setWidth(double w) {
		if( w<=0 ){
			this.width = 0;
		}else{
			this.width = w;
		}
	}
	
	public void setHeight(double h) {
		if( h<=0 ){
			this.height = 0;
		}else{
			this.height = h;
		}
	}
	
	public double getX() {
		return x;
	}
	
	public double getY() {
		return y;
	}
	
	public double getWidth() {
		return width;
	}
	
	public double getHeight() {
		return height;
	}
	
}

package geometry;

public class Circle {
	private double x;
	private double y;
	private double radius;
	
	public void setX(double x) {
		this.x = x;
	}
	
	public void setY(double y) {
		this.y = y;
	}
	
	public void setRadius(double r) {
		if( r<=0 ){
			this.radius = 0;
		}else{
			this.radius = r;
		}
	}
	
	public double getX() {
		return x;
	}
	
	public double getY() {
		return y;
	}
	
	public double getRadius() {
		return radius;
	}
}

package geometry;

public class Geometry {
	private Rectangle rect;
	private Circle circle;
	
	public Geometry( Rectangle rect, Circle circle ) {
		this.rect = rect;
		this.circle = circle;
	}
	
	public void setRectPos( double x, double y ) {
		rect.setX(x);
		rect.setY(y);
	}
	
	public void setCirPos( double x, double y ) {
		circle.setX(x);
		circle.setY(y);
	}
	
	public void setRectW_H( double w ,double h ) {
		rect.setWidth(w);
		rect.setHeight(h);
	}
	
	public void setCirRadius( double r ) {
		circle.setRadius(r);
	}
	
	public void showPos() {
		if( circle.getX()-rect.getX()==rect.getWidth() ){
			System.out.println("矩形在圆形的左边。");
		}else if( rect.getX()-circle.getX()==circle.getRadius()*2 ){
			System.out.println("矩形在圆形的右边。");
		}
	}
	
	public static void main(String[] args) {
		Rectangle rect1 = new Rectangle();
		Rectangle rect2 = new Rectangle();
		Circle circle1 = new Circle();
		Circle circle2 = new Circle();
		Geometry g1 = new Geometry(rect1, circle1);
		Geometry g2 = new Geometry(rect2, circle2);
		
		g1.setRectPos(30, 40);
		g1.setRectW_H(120, 80);
		g1.setCirPos(150, 30);
		g1.setCirRadius(60);
		
		g2.setRectPos(160, 160);
		g2.setRectW_H(120, 80);
		g2.setCirPos(40, 30);
		g2.setCirRadius(60);
		
		g1.showPos();
		g2.showPos();
	}

}


例7：
